{"version":3,"sources":["cryptedMessage.js","App.js","serviceWorker.js","index.js"],"names":["cryptedMessage","copyCryptedMessage","dummy","document","createElement","body","appendChild","value","select","execCommand","removeChild","typeWritterMessage","typewriter","pauseFor","changeDelay","typeString","start","App","style","padding","position","right","color","zIndex","border","bottom","top","left","background","onInit","fontSize","fontFamily","onClick","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mMAAaA,EAAc,uyBCIrBC,EAAqB,WACzB,IAAIC,EAAQC,SAASC,cAAc,YACnCD,SAASE,KAAKC,YAAYJ,GAC1BA,EAAMK,MAAQP,EACdE,EAAMM,SACNL,SAASM,YAAY,QACrBN,SAASE,KAAKK,YAAYR,IAGtBS,EAAqB,SAACC,GAC1BA,EACGC,SAAS,KACTC,YAAY,KACZC,WAAW,gCACXD,YAAY,GACZC,WAAW,mJACXF,SAAS,KACTE,WAAW,wFACXF,SAAS,KACTC,YAAY,GACZC,WAVH,2DAUkEf,EAVlE,WAWGa,SAAS,KACTE,WAAW,iIACXF,SAAS,KACTE,WAAW,cACXA,WAAW,0BACXD,YAAY,KACZC,WAAW,KACXA,WAAW,KACXA,WAAW,KACXA,WAAW,KACXA,WAAW,KACXA,WAAW,KACXF,SAAS,KACTC,YAAY,GACZC,WAAW,4FACXA,WAAW,kFACXA,WA3BH,iOAgCGF,SAAS,KACTE,WAAW,mFACXA,WAAW,uDACXA,WAAW,oDACXA,WAAW,6BACXA,WAAW,kDACXC,SA2BUC,MAxBf,WACE,OACE,oCACA,yBAAKC,MAAO,CAACC,QAAS,OAAQC,SAAU,WAAYC,MAAO,IAAKC,MAAO,QAASC,OAAQ,IAAxF,UACA,yBAAKL,MAAO,CACVC,QAAS,MACTC,SAAU,WACVI,OAAQ,kBACRC,OAAQ,OACRC,IAAK,OACLC,KAAM,OACNN,MAAO,OACPO,WAAY,OACZN,MAAO,UAEP,kBAAC,IAAD,CAAYO,OAAQlB,IACpB,4BACEO,MAAO,CAACY,SAAU,MAAOV,SAAU,WAAYK,OAAQ,OAAQJ,MAAO,OAAQU,WAAY,kBAC1FC,QAAS/B,GAFX,8BC3DcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpC,SAASqC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.2a0fbef5.chunk.js","sourcesContent":["export const cryptedMessage = `\nlzwaąówfni!!!\n13 bzdiżśmw b ymraiń zwdis d kąśhwfnr lzw u źiśź bi #bzufówb żbmjaąnisć hdmit yzulzwsmźać b wz-owz (zćśiń 5, bzufpwb. nwń azwkmg: łaayź://amść.yó/a1ydk), źawza 19.00!\nniżóm ailu hśmw dlpuźmźd źmj hu owzą nwńu nihśw d ymizbźdćfł 8 uźxo uazdćswźd źyifnwóśilu hzmśńw #bzu256 dw kzii (źńpwh hzmśńw św źazuśmi lpxbśin yzunińaą). yuhwn owzswśubm łwźpu: lzwuźiśźbzu256\n\nąhuśilu żbmjaubwśmw m hu duowfdiśmw!\ndiźyxp kąśhwfnm lzw u źiśź\n`","import React from 'react';\nimport Typewriter from 'typewriter-effect';\nimport { cryptedMessage } from './cryptedMessage';\n\nconst copyCryptedMessage = () => {\n  var dummy = document.createElement(\"textarea\");\n  document.body.appendChild(dummy);\n  dummy.value = cryptedMessage;\n  dummy.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(dummy);\n}\n\nconst typeWritterMessage = (typewriter) => {\n  typewriter\n    .pauseFor(1000)\n    .changeDelay(100)\n    .typeString('<h1>Witajcie na #wro256</h1>')\n    .changeDelay(1)\n    .typeString('<p>Fundacja Gra o Sens ma niezwykłą przyjemność zaprosić do wspólnego świętowania Dnia Programisty!!!</p>')\n    .pauseFor(1000)\n    .typeString('<p>Przygotowaliśmy dla Ciebie małą niespodziankę, oto i ona:</p>')\n    .pauseFor(1000)\n    .changeDelay(1)\n    .typeString(`<div style=\"word-break: break-word\" id=\"suprise\">${cryptedMessage}</div>`)\n    .pauseFor(2000)\n    .typeString('<p>O nie... wygląda na to, że ktoś zaszyfrował część naszej niespodzianki... Co teraz?</p>')\n    .pauseFor(3000)\n    .typeString('<br/><br/>')\n    .typeString('Rozpoczynam transmisje')\n    .changeDelay(1000)\n    .typeString('.')\n    .typeString('.')\n    .typeString('.')\n    .typeString('.')\n    .typeString('.')\n    .typeString('.')\n    .pauseFor(2000)\n    .changeDelay(1)\n    .typeString('<p>Całą wiadomość zakodowałem zmodyfikowanym szyfrem Cezara</p>')\n    .typeString('Klucz zastosowany w algorytmie został wygenerowany następująco:')\n    .typeString(`\n      <ol>\n        <li>alfabet został przesunięty o 256 ^ &frac12; znaków w lewo </li>\n        <li>litery składające się na hashtag imprezy zostaly przesuniete na poczatek</li>\n      </ol>`)\n    .pauseFor(2000)\n    .typeString('<p>Algorytm przepisuje znaki nie będące literami bez modyfikacji.</p>')\n    .typeString('<p>Reszta algorytmu cezara pozostaje bez zmian.</p>')\n    .typeString('<p>Powodzenia w rozkodowaniu wiadomości</p>')\n    .typeString('<p>Ave Cesar \\\\(-.-)_</p>')\n    .typeString('<p style=\"margin-left: 50px;\">BrutusH4ck3r</p>')\n    .start(); \n}\n\nfunction App() {\n  return (\n    <>\n    <div style={{padding: '10px', position: \"absolute\", right: '0', color: 'white', zIndex: 1}}>_ [] X</div>\n    <div style={{\n      padding: '1em',\n      position: \"absolute\",\n      border: 'solid 40px grey',\n      bottom: '10px',\n      top: '10px',\n      left: '10px',\n      right: '10px',\n      background: 'blue',\n      color: 'white'}}\n    >\n      <Typewriter onInit={typeWritterMessage}/>\n      <button\n        style={{fontSize: '2em', position: \"absolute\", bottom: '10px', right: '10px', fontFamily: \"Press Start 2P\"}}\n        onClick={copyCryptedMessage}>Kopiuj szyfr do schowka</button>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}